import tkinter as tk
import random

class SnakeGame:
    def __init__(self, master):
        self.master = master
        self.master.title("Snake Game")
        self.master.resizable(False, False)

        # Canvas dimensions
        self.width = 400
        self.height = 400
        self.cell_size = 20

        # Canvas setup
        self.canvas = tk.Canvas(master, width=self.width, height=self.height, bg="black")
        self.canvas.pack()

        # Game variables
        self.snake = [(200, 200), (180, 200), (160, 200)]
        self.food = None
        self.direction = "Right"
        self.running = True

        # Event bindings
        self.master.bind("<KeyPress>", self.change_direction)

        # Start game
        self.spawn_food()
        self.update_game()

    def spawn_food(self):
        """Spawn food at a random location."""
        while True:
            x = random.randint(0, (self.width // self.cell_size) - 1) * self.cell_size
            y = random.randint(0, (self.height // self.cell_size) - 1) * self.cell_size
            if (x, y) not in self.snake:
                self.food = (x, y)
                break
        self.canvas.create_rectangle(x, y, x + self.cell_size, y + self.cell_size, fill="red", tag="food")

    def change_direction(self, event):
        """Change the snake's direction based on keypress."""
        new_direction = event.keysym
        all_directions = {"Up", "Down", "Left", "Right"}
        opposites = {"Up": "Down", "Down": "Up", "Left": "Right", "Right": "Left"}

        if new_direction in all_directions and new_direction != opposites[self.direction]:
            self.direction = new_direction

    def update_game(self):
        """Update the game state."""
        if not self.running:
            return

        # Calculate new head position
        head_x, head_y = self.snake[0]
        if self.direction == "Up":
            head_y -= self.cell_size
        elif self.direction == "Down":
            head_y += self.cell_size
        elif self.direction == "Left":
            head_x -= self.cell_size
        elif self.direction == "Right":
            head_x += self.cell_size

        new_head = (head_x, head_y)

        # Check for collisions
        if (
            head_x < 0 or head_x >= self.width or
            head_y < 0 or head_y >= self.height or
            new_head in self.snake
        ):
            self.game_over()
            return

        # Check if food is eaten
        if new_head == self.food:
            self.snake.insert(0, new_head)  # Grow snake
            self.canvas.delete("food")
            self.spawn_food()
        else:
            self.snake.insert(0, new_head)
            self.snake.pop()  # Remove tail

        # Redraw snake
        self.canvas.delete("snake")
        for x, y in self.snake:
            self.canvas.create_rectangle(x, y, x + self.cell_size, y + self.cell_size, fill="green", tag="snake")

        # Schedule next update
        self.master.after(100, self.update_game)

    def game_over(self):
        """End the game."""
        self.running = False
        self.canvas.create_text(
            self.width // 2, self.height // 2,
            text="GAME OVER", fill="white", font=("Arial", 24)
        )

if __name__ == "__main__":
    root = tk.Tk()
    game = SnakeGame(root)
    root.mainloop()
